worker_processes 1;
error_log error.log info;
env REDIS_PASSWORD;
env REDIS_HOSTNAME;
env REDIS_PORT;
env DOWNLOAD_SERVICE_URL;
env S3_HOSTNAME;
env S3_PORT;

events {
    worker_connections 1024;
}

http {
    lua_package_path "/path/to/lua-resty-redis/lib/?.lua;;";
    include /usr/local/openresty/nginx/conf/mime.types;
	default_type application/octet-stream;

    resolver 127.0.0.11 ipv6=off;

    init_worker_by_lua_block {
        redis = require "resty.redis"
    }

    server {
        listen 8000;

        sendfile        on;
        keepalive_timeout  65;

        # Allow special characters in headers
        ignore_invalid_headers off;
        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # Disable buffering
        proxy_buffering off;
        proxy_request_buffering off;

        # Download Service
        location /download-service {
            set_by_lua $upstream_server 'return os.getenv("DOWNLOAD_SERVICE_URL")';

            rewrite ^/download-service/(.*) /$1 break;
            proxy_pass $upstream_server;
            proxy_set_header Host $host;
        }

        location /download/ {
            set $target '';
            access_by_lua_block {
                local uri = ngx.var.uri
                local downloadId = string.match(uri, "^/download/(%w+)$")
                if not downloadId then
                    ngx.say("Invalid Download URL")
                    return ngx.exit(400)
                end

                local red = redis:new()
                red:set_timeout(1000) -- 1 second

                local redis_password = os.getenv("REDIS_PASSWORD")
                if not redis_password then
                    ngx.log(ngx.ERR, "REDIS_PASSWORD environment variable is not set")
                    return ngx.exit(500)
                end

                local redis_hostname = os.getenv("REDIS_HOSTNAME")
                local redis_port = os.getenv("REDIS_PORT")
                local ok, err = red:connect(redis_hostname, redis_port)
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                    return ngx.exit(500)
                end

                local res, err = red:auth(redis_password)
                if not res then
                    ngx.log(ngx.ERR, "failed to authenticate: ", err)
                    return ngx.exit(500)
                end

                local presignedUrl, err = red:get(downloadId)
                if not res then
                    ngx.log(ngx.ERR, "failed to get key: ", err)
                    return ngx.exit(500)
                end

                if presignedUrl == ngx.null then
                    ngx.say("Download URL no longer valid!")
                    return ngx.exit(400)
                else
                    local res, err = red:del(downloadId)
                    if not res then
                        ngx.log(ngx.ERR, "failed to delete key: ", err)
                        return ngx.exit(500)
                    end
                end

                ngx.var.target = presignedUrl
            }

            set_by_lua $s3_hostname 'return os.getenv("S3_HOSTNAME")';
            set_by_lua $s3_port 'return os.getenv("S3_PORT")';
            proxy_set_header Host $s3_hostname:$s3_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 300;
            proxy_http_version 1.1;                         # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
            proxy_set_header Connection "";
            chunked_transfer_encoding off;
            proxy_pass $target;
        }
    }
}
